esphome:
  name: Dreo_DR-HTF004S
  platformio_options:
    #board_build.bkcrypt_coeffs: "123456782FAA55AA3AEE63DD4FEEAA00" does not really matter
    board_build.bkcrypt_coeffs: "00000000000000000000000000000000"
    board_build.bkota.key: "0123456789ABCDEF0123456789ABCDEF"
    board_build.bkota.iv: "0123456789ABCDEF"
    board_flash.calibration: "0x1E0000+0x1000"
    board_flash.download: "0x132000+0xAE000"

bk72xx:
  board: generic-bk7231n-qfn32-tuya
  framework:
    version: latest
    loglevel: debug # Turn this off if you don't need it
    debug: # Turn this off if you don't need it
      - wifi
      - ota
      - client
      - server
      - fdb
      - mdns
      - lwip

# Enable logging
logger:
  level: DEBUG # Turn this off if you don't need it
  

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Optional manual IP
  manual_ip:
    static_ip: <YOUR_IP_HERE>
    gateway: <YOUR_GW_HERE>
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Dreo Bl2028N Fallback Hotspot"
    password: "<YOUR_FALLBACK_AP_PW_HERE>"
  power_save_mode: none # Use full power wifi all the time

web_server:
  port: 80

# Enable Home Assistant API
api:
  encryption:
    key: "<YOUR_ENCRYPTION_KEY_HERE>"

ota:
  - platform: esphome
    password: "<YOUR_OTA_PW_HERE>"

# Enable UART on the right PINs to communicate with 8051 MCU
uart:
  id: uart_bus
  tx_pin: TX1
  rx_pin: RX1
  baud_rate: 9600
  rx_buffer_size: 512
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\r\n"
    sequence:
      - lambda: |-
          UARTDebug::log_string(direction, bytes);
          if (direction == UART_DIRECTION_RX) { // Process the bytes incomming. We do not validate the checksum for now.
            // Validate we have the settings read return starting with `AA 27 FA 00 ... 03 or 04`. 03 = Read settings, 04 = Settings changed physically on device
            if (bytes.size() == 40 && bytes[0] == 0xAA && bytes[1] == 0x27 && bytes[2] == 0xFA && bytes[3] == 0x00 && ( bytes[9] == 0x03 || bytes[9] == 0x04)) {
            
              // Do not send the MCU an updated settings since we just read it from it. - Poor man's semaphore.
              id(disable_send_fan_command) = true;

              // We read the settings and change the globals accordingly.

              // Read Temperature
              ESP_LOGD("main", "We read 0x%02X temperature.", bytes[23] );
              id(temp_fan).publish_state( (float) bytes[23] ); 

              // Read Beeper, only change it if different than what we know.
              if (bytes[12] == 0x04) {
              ESP_LOGD("main", "We read 'Sound On'");
                if(id(fan_beeper).state != "Sound On"){
                  ESP_LOGD("main", "Changing Fan Beeper setting to 'Sound On'");
                  id(fan_beeper).publish_state("Sound On");
                } else {
                  ESP_LOGD("main", "Not changing Fan Beeper settings.");
                }
              } else if (bytes[12] == 0x08) {
              ESP_LOGD("main", "We read 'Sound Off'");
                if(id(fan_beeper).state != "Sound Off"){
                  ESP_LOGD("main", "Changing Fan Beeper setting to 'Sound Off'");
                  id(fan_beeper).publish_state("Sound Off");
                } else {
                  ESP_LOGD("main", "Not changing Fan Beeper settings.");
                }
              }

              // Read Adaptive Display, only change it if different than what we know.
              if (bytes[29] == 0x40) {
                ESP_LOGD("main", "We read 'Adaptive Display On'");
                if (id(fan_adaptive_display).state != "Adaptive Display On") {
                  ESP_LOGD("main", "Changing Adaptive Display setting to 'Adaptive Display On'");
                  id(fan_adaptive_display).publish_state("Adaptive Display On");
                } else {
                  ESP_LOGD("main", "Not changing Adaptive Display settings.");
                }
              } else if (bytes[29] == 0x80) {
                ESP_LOGD("main", "We read 'Adaptive Display Off'");
                if (id(fan_adaptive_display).state != "Adaptive Display Off") {
                  ESP_LOGD("main", "Changing Adaptive Display setting to 'Adaptive Display Off'");
                  id(fan_adaptive_display).publish_state("Adaptive Display Off");
                } else {
                  ESP_LOGD("main", "Not changing Adaptive Display settings.");
                }
              }

              // Read Fan Mode, only change it if different than what we know.
              if (bytes[14] == 0x1B) {
                ESP_LOGD("main", "We read Fan Mode:'Auto'");
                if (id(fan_mode).state != "Auto") {
                  ESP_LOGD("main", "Changing Fan Mode setting to 'Auto'");
                  id(fan_mode).publish_state("Auto");
                } else {
                  ESP_LOGD("main", "Not changing Fan Mode settings.");
                }
              } else if (bytes[14] == 0x05) {
                ESP_LOGD("main", "We read Fan Mode:'Natural'");
                if (id(fan_mode).state != "Natural") {
                  ESP_LOGD("main", "Changing Fan Mode setting to 'Natural'");
                  id(fan_mode).publish_state("Natural");
                } else {
                  ESP_LOGD("main", "Not changing Fan Mode settings.");
                }
              } else if (bytes[14] == 0x03) {
                ESP_LOGD("main", "We read Fan Mode:'Normal'");
                if (id(fan_mode).state != "Normal") {
                  ESP_LOGD("main", "Changing Fan Mode setting to 'Normal'");
                  id(fan_mode).publish_state("Normal");
                } else {
                  ESP_LOGD("main", "Not changing Fan Mode settings.");
                }
              } else if (bytes[14] == 0x07) {
                ESP_LOGD("main", "We read Fan Mode:'Sleep'");
                if (id(fan_mode).state != "Sleep") {
                  ESP_LOGD("main", "Changing Fan Mode setting to 'Sleep'");
                  id(fan_mode).publish_state("Sleep");
                } else {
                  ESP_LOGD("main", "Not changing Fan Mode settings.");
                }
              } else if (bytes[14] == 0x02) {
                ESP_LOGD("main", "We read Fan Mode:'OFF'");
                if (id(fan_mode).state != "OFF") {
                  ESP_LOGD("main", "Changing Fan Mode setting to 'OFF'");
                  id(fan_mode).publish_state("OFF");
                } else {
                  ESP_LOGD("main", "Not changing Fan Mode settings.");
                }
              }

              // Read Fan Speed, only change it if different than what we know.
              std::string fan_speed_new = std::to_string(bytes[15]);
              ESP_LOGD("main", "We read Fan Speed: '%s'", fan_speed_new.c_str());
              if (id(fan_speed).state != fan_speed_new) {
                ESP_LOGD("main", "Changing Fan Speed setting to '%s'", fan_speed_new.c_str());
                id(fan_speed).publish_state(fan_speed_new.c_str());
              } else {
                ESP_LOGD("main", "Not changing Fan Speed settings.");
              }

              // Read Oscillation, only change it if different than what we know.
              if (bytes[18] == 0x11) {
                ESP_LOGD("main", "We read Oscillation:'30 Degrees'");
                if (id(fan_oscillation).state != "30 Degrees") {
                  ESP_LOGD("main", "Changing Oscillation setting to '30 Degrees'");
                  id(fan_oscillation).publish_state("30 Degrees");
                } else {
                  ESP_LOGD("main", "Not changing Oscillation settings.");
                }
              } else if (bytes[18] == 0x21) {
                ESP_LOGD("main", "We read Oscillation:'60 Degrees'");
                if (id(fan_oscillation).state != "60 Degrees") {
                  ESP_LOGD("main", "Changing Oscillation setting to '60 Degrees'");
                  id(fan_oscillation).publish_state("60 Degrees");
                } else {
                  ESP_LOGD("main", "Not changing Oscillation settings.");
                }
              } else if (bytes[18] == 0x31) {
                ESP_LOGD("main", "We read Oscillation:'90 Degrees'");
                if (id(fan_oscillation).state != "90 Degrees") {
                  ESP_LOGD("main", "Changing Oscillation setting to '90 Degrees'");
                  id(fan_oscillation).publish_state("90 Degrees");
                } else {
                  ESP_LOGD("main", "Not changing Oscillation settings.");
                }
              } else if (bytes[18] == 0x41) {
                ESP_LOGD("main", "We read Oscillation:'120 Degrees'");
                if (id(fan_oscillation).state != "120 Degrees") {
                  ESP_LOGD("main", "Changing Oscillation setting to '120 Degrees'");
                  id(fan_oscillation).publish_state("120 Degrees");
                } else {
                  ESP_LOGD("main", "Not changing Oscillation settings.");
                }
              } else if (bytes[18] == 0x00 || bytes[18] == 0x20 || bytes[18] == 0x30 || bytes[18] == 0x40) {
                ESP_LOGD("main", "We read Oscillation:'OFF' - 0x%02X", bytes[18]);
                if (id(fan_oscillation).state != "OFF") {
                  ESP_LOGD("main", "Changing Oscillation setting to 'OFF'");
                  id(fan_oscillation).publish_state("OFF");
                } else {
                  ESP_LOGD("main", "Not changing Oscillation settings.");
                }
              }

              id(disable_send_fan_command) = false; // Re-enable sending updates to the MCU.

            } else if (bytes.size() == 31 && bytes[0] == 0xAA && bytes[1] == 0x1E && bytes[2] == 0xFA && bytes[9] == 0x63) {

              // We have been asked for a ping by the MCU `AA 1E FA 00 00 00 00 00 00 63...`
              ESP_LOGD("main", "Received a 'Ping Request' from MCU. Responding.");
              // Respond with a ping `aa 14 fa 00 00 00 00 00 00 0d 01 01 00 00 00 00 00 00 00 00 e3`
              std::vector<uint8_t> response = {0xaa, 0x14, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3};
              id(uart_bus).write_array(response.data(), response.size());

            }  else if (bytes.size() == 31 && bytes[0] == 0xAA && bytes[1] == 0x1E && bytes[2] == 0xFA && bytes[9] == 0x61) {

              // We have been asked for a pre-ping by the MCU `AA 1E FA 00 00 00 00 00 00 61...`
              ESP_LOGD("main", "Received a 'Pre-Ping Request' from MCU. Doing Nothing until Ping.");

            } else if (bytes.size() == 32 && bytes[0] == 0xAA && bytes[1] == 0x1F && bytes[2] == 0xFA && bytes[9] == 0x64 && bytes[15] == 0x01) {

              // We have received a "Pairing Mode On" from MCU `aa 1f fa 00 00 00 00 00 00 64 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 82`
              ESP_LOGD("main", "Received a 'Pairing Mode ON' request from MCU.");
              // Confirm we have received it via answer `aa 1e fa 00 00 00 00 00 00 64 00 00 00 00 03 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7e`

              for (auto byte : bytes) {
                ESP_LOGD("main", "0x%02X", byte);
              }

              // We set the flashing light
              ESP_LOGD("main", "Setting the light to flash.");
              std::vector<uint8_t> response = {0xaa, 0x1e, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e};
              id(uart_bus).write_array(response.data(), response.size());

            } else {
              ESP_LOGD("main", "Unknown UART Command received from MCU");
              for (auto byte : bytes) {
                ESP_LOGD("main", "0x%02X", byte);
              }
            }
          } else {
            ESP_LOGD("main", "We sent %d bytes.", bytes.size() );
            for (auto byte : bytes) {
                ESP_LOGD("main", "0x%02X", byte);
            }
          }

# Send a settings readout every 5 seconds.
interval:
  - interval: 5s
    then:
      - uart.write: [0xaa, 0x0a, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf9]

# Temperature sensor, changed by the UART lambda
sensor:
  - platform: template
    id: "temp_fan"
    filters:
      - lambda: return (x - 32.0) * (5.0/9.0); # Convert F value to C
    unit_of_measurement: "°C"
    name: "Air Temperature"

# Define global variables
globals:

  - id: fan_mode_memory_global #remember last fan mode
    type: std::string
    restore_value: true
    initial_value: '"OFF"'

  - id: fan_mode_global
    type: std::string
    restore_value: true
    initial_value: '"OFF"'
  
  - id: fan_speed_global
    type: int
    restore_value: true
    initial_value: '1'
  
  - id: fan_oscillation_global
    type: std::string
    restore_value: true
    initial_value: '"OFF"'
  
  - id: fan_beeper_global
    type: std::string
    restore_value: true
    initial_value: '"Sound On"'
  
  - id: fan_adaptive_display_global
    type: std::string
    restore_value: true
    initial_value: '"Adaptive Display On"'

  - id: disable_send_fan_command
    type: bool
    restore_value: no
    initial_value: 'true'

# Define select components
select:
  - platform: template
    name: "Fan Mode"
    id: fan_mode
    options:
      - "Auto"
      - "Natural"
      - "Normal"
      - "Sleep"
      - "OFF"
    restore_value: true
    optimistic: true
    on_value:
      then:
        - switch.turn_on: send_fan_command

  - platform: template
    name: "Fan Speed"
    id: fan_speed
    options:
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      - "8"
      - "9"
      - "10"
      - "11"
      - "12"
    restore_value: true
    optimistic: true
    on_value:
      then:
        - switch.turn_on: send_fan_command

  - platform: template
    name: "Oscillation Angle"
    id: fan_oscillation
    options:
      - "OFF"
      - "30 Degrees"
      - "60 Degrees"
      - "90 Degrees"
      - "120 Degrees"
    restore_value: true
    optimistic: true
    on_value:
      then:
        - switch.turn_on: send_fan_command

  - platform: template
    name: "Beeper"
    id: fan_beeper
    options:
      - "Sound On"
      - "Sound Off"
    restore_value: true
    optimistic: true
    on_value:
      then:
        - switch.turn_on: send_fan_command

  - platform: template
    name: "Adaptive Display"
    id: fan_adaptive_display
    options:
      - "Adaptive Display On"
      - "Adaptive Display Off"
    restore_value: true
    optimistic: true
    on_value:
      then:
        - switch.turn_on: send_fan_command

# Template switch to handle sending bytestreams with all the settings at once.
switch:
  - platform: template
    name: "Send Fan Command"
    id: send_fan_command
    internal: true
    turn_on_action:
      - lambda: |-
          std::vector<uint8_t> bytestream = {0xaa, 0x1e, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
          
          // Send the bytestream via UART only if we were not updating settings reading from the MCU.
          if (!id(disable_send_fan_command)) {

            ESP_LOGD("custom", "Initial bytestream: ");
            for (auto byte : bytestream) {
              ESP_LOGD("custom", "0x%02X", byte);
            }

            // Modify the mode byte
            // Remember the mode, only for the "ON" modes.
            if (id(fan_mode).state == "Auto") {
              id(fan_mode_memory_global) = id(fan_mode).state;
              bytestream[14] = 0x1b;
            } else if (id(fan_mode).state == "Natural") {
              id(fan_mode_memory_global) = id(fan_mode).state;
              bytestream[14] = 0x05;
            } else if (id(fan_mode).state == "Normal") {
              id(fan_mode_memory_global) = id(fan_mode).state;
              bytestream[14] = 0x03;
            } else if (id(fan_mode).state == "Sleep") {
              id(fan_mode_memory_global) = id(fan_mode).state;
              bytestream[14] = 0x07;
            } else { // OFF
              bytestream[14] = 0x02;
            }

            // Modify the speed byte
            int speed = atoi(id(fan_speed).state.c_str());
            bytestream[15] = speed;

            // Modify the oscillation byte
            // 1st nibble = Angle, 2nd nibble = activate (0 not needed)
            if (id(fan_oscillation).state == "30 Degrees") {
              bytestream[18] = 0x11;
            } else if (id(fan_oscillation).state == "60 Degrees") {
              bytestream[18] = 0x21;
            } else if (id(fan_oscillation).state == "90 Degrees") {
              bytestream[18] = 0x31;
            } else if (id(fan_oscillation).state == "120 Degrees") {
              bytestream[18] = 0x41;
            } else { // OFF
              bytestream[18] = 0x00;
            }

            // Modify the beeper byte
            if (id(fan_beeper).state == "Sound On") {
              bytestream[12] = 0x04;
            } else if (id(fan_beeper).state == "Sound Off") {
              bytestream[12] = 0x08;
            }

            // Modify the adaptive display byte
            if (id(fan_adaptive_display).state == "Adaptive Display On") {
              bytestream[29] = 0x40;
            } else if (id(fan_adaptive_display).state == "Adaptive Display Off") {
              bytestream[29] = 0x80;
            }

            ESP_LOGD("custom", "Modified bytestream before checksum: ");
            for (auto byte : bytestream) {
              ESP_LOGD("custom", "0x%02X", byte);
            }

            // Calculate checksum:
            // Ignore 1st byte if it's 0xAA
            // negative sum of remaining bytes
            // minus twice the length (2nd byte of stream)
            // modulo 256 (0x100)

            int start = 0;

            // Ignore the first byte if it is 0xAA (but keep it in final stream)
            if (bytestream[0] == 0xAA) {
              start = 1;
            }

            // Initialize checksum with the first useful byte (the length)
            int checksum = bytestream[start];

            // Negative sum of remaining bytes
            for (int i = start + 1; i < bytestream.size(); i++) {
              checksum -= bytestream[i];
            }

            // Substract 2x the length
            checksum = (checksum - 2 * bytestream[start]) % 0x100;

            bytestream.push_back(checksum);

            ESP_LOGD("custom", "Bytestream with checksum: ");
            for (auto byte : bytestream) {
              ESP_LOGD("custom", "0x%02X", byte);
            }

            // Send the bytestream via UART
            id(uart_bus).write_array(bytestream.data(), bytestream.size());
          }

# Define switches for turning the fan on and off, re-using the "fan mode" options
  - platform: template
    name: "Fan Power (ON/OFF)"
    id: fan_power
    lambda: |-
          // Turn the switch ON/OFF by default based on the fan state.
          if (!(id(fan_mode).state == "OFF")) { return true; } else { return false; }
    turn_on_action:
      - lambda: |-
          // Turn on and restore fan mode from memory before it was turned OFF
          id(fan_mode).publish_state(to_string(id(fan_mode_memory_global)).c_str());
    turn_off_action:
      - lambda: |-
          id(fan_mode).publish_state("OFF");
  
  # Simple static UART commands to get settings, serial, etc.
  - platform: uart
    entity_category: 'diagnostic'
    name: "Get Settings & Temp (5s)"
    data: [0xaa, 0x0a, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf9]
    send_every: 5s
  - platform: uart
    entity_category: 'diagnostic'
    name: "Get Serial (Once)"
    data: [0xaa, 0x0b, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0xef]


# Static UART commands taken from previous traffic dump - used for tests
  - platform: uart
    entity_category: 'diagnostic'
    name: "UART - Turn fan ON/OFF"
    data:
        turn_on: [0xaa, 0x1e, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c]
        turn_off: [0xaa, 0x1e, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84]
  - platform: uart
    entity_category: 'diagnostic'
    name: "UART - Beep ON/OFF"
    data:
      turn_on: [0xaa, 0x1e, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x03, 0x01, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E]
      turn_off: [0xaa, 0x1e, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x08, 0x00, 0x03, 0x01, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7A]
  - platform: uart
    entity_category: 'diagnostic'
    name: "UART - Adaptative Display ON/OFF"
    data:
      turn_on: [0xaa, 0x1e, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x41]
      turn_off: [0xaa, 0x1e, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01]
